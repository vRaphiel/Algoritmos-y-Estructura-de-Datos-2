// Práctica 1

// Ejercicio 1

// a
duplicar : secu(α) -> secu(α)
duplicar(<>) ≡ <>
duplicar(x • s) ≡ x • x • duplicar(s) 

// b
// no se entiende que hacer

// c
reverso : secu(α) -> secu(α)
reverso(<>) ≡ <>
reverso(x • s) ≡ reverso(s) • x

// d
capicua : secu(α) × secu(α) -> bool
capicua(s) ≡ reverso(s) = s

// e
esPrefijo? : secu(α) × secu(α) -> bool
esPrefijo?(<>, t) ≡ true
esPrefijo?(x • s, t) ≡ if vacia?(t) then false else x=prim(t) ∧ esPrefijo?(s, fin(t)) fi

// f 
Buscar : secu(α) × secu(α) -> Nat 
Buscar(<>, t) ≡ 0
Buscar(x • s, t) ≡ if ¬vacia?(t) then
											if ¬esPrefijo?(x • s, t) then 1 + Buscar(x • s, fin(t)) else 0 fi
									 fi  
									 
// g 
EstaOrdenada? : secu(α) -> bool
EstaOrdenada? (<>) ≡ true
EstaOrdenada? (x • s) ≡ if vacia?(s) then true else x < prim(s) ∧ EstaOrdenada?(s) fi

// h
InsertarOrdenada : secu(α) s0 × α -> secu(α)   {EstaOrdenada?(s0) = true}
InsertarOrdenada (<>, e) ≡ <e>
InsertarOrdenada (x • s, e) ≡ if x > e then (e • x • s) else (x • InsertarOrdenada(s, e)) fi

// i 
CantidadApariciones : secu(α) × α -> Nat 
CantidadApariciones (<>, e) ≡ 0
CantidadApariciones (x • s, e) ≡ if x = s then
																	1 + CantidadApariciones(s, e)
																 else
																 	CantidadApariciones(s, e)
																 fi

// j
esPermutacion? : secu(α) × secu(α) -> bool
esPermutacion (<>, t) ≡ long(t) = 0
esPermutacion (x • s, t) ≡  // No salio

// k
Combinar : secu(α) a × secu(α) b -> secu(α)  {EstaOrdenada?(a) ∧ EstaOrdenada?(b) = true}
Combinar (<>, t) = t
Combinar (x • s, t) ≡ 
											if ¬vacia?(t) then
												if x < prim(t) then
													x • Combinar(s, t)
												else
													prim(t) • Combinar(s, fin(t))
												fi
											else
												x • s
											fi
											
											
// Ejercicio 2

// a
#Hojas : ab(α) -> Nat
#Hojas (nil) ≡ 0
#Hojas (bin(i, r, d)) ≡ if esHoja?(bin(i,r,d)) then 1 else #Hojas(r) + #Hojas(i) fi 

// b 
DegeneradoAIzquierda: ab(α) -> Bool
DegeneradoAIzquierda(a) ≡ nil?(a) ∨L if esHoja?(a) 
																			then true 
																			else nil?(der(a)) ∧ DegeneradoAIzquierda(izq(a))
																		 fi

// c
ZigZag: ab(α) -> Bool
ZigZag(a) ≡ nil?(a) ∨L esHoja?(a) ∨L 
						if nil?(izq(a))
									then nil?(der(der(a))) ∧ ZigZag(der(a))
									else 
										if nil?(izq(a))
										then ZigZag(der(a))
									  else false
									  fi
					  fi
						
// d)
UltimoNivelCompleto: ab(α) -> nat
UltimoNivelCompleto(a) ≡ if nil?(a)
														then 0
												else 1 + min(UltimoNivelCompleto ( izq(a) ), UltimoNivelCompleto (der(a) ))
																			
// e)
Espejo: ab(α) -> ab(α)
Espejo(a) ≡ if nil?(a)
							then a
							else bin( Espejo (der(a), raiz(a), Espejo (izq(a))))
						fi
												
// f)
EsSimetrico?: ab(α) -> Bool
EsSimetrico?(a) ≡ a = Espejo(a)

// Ejercicio 3
// a)
agregarTodos: α x conj(conj(α)) -> conj(α)
agregarTodos(n, c) ≡ if Ø?(c)
		then Ag(Ag(n, Ø), Ø)
		else Ag(Ag(n, dameUno(c)), agregarTodos(n, sinUno(c)))
																 fi

PartesDe: conj(α) -> conj(conj(α))
PartesDe(c) ≡ if Ø?(c) then c
					    	else agregarTodos(dameUno(c), PartesDe(sinUno(c))) ∪ PartesDe(sinUno(c))
							fi
											

											
// 4
// PREGUNTAR ESTE Ejercicio

// 5
// α
NivelNormal? : at(α) × Int k-> Bool   { k>=1 }
NivelNormal? (a, k) ≡
	if nil?(a) then
		false
	else
		if k=1 then
			¬nil(med(a)) ∧ ¬nil(der(a)) ∧ ¬nil(izq(a))
		else
			NivelNormal(med(a), k-1) ∧ NivelNormal(izq(a), k-1) ∧ NivelNormal(der(a), k-1)
		fi
	fi			
	
// b
//Consultar

Acotado? : at(α) × Int -> Bool   { k>=1 }
Acotado (a, k) ≡ 
		if nil?(a) then
			true
		else
			if #NodosHijos(a) < k then
				 Acotado()
			else
				false
			fi
		fi										 																								 



// 6
// α
ramaMasAlta : α × secu(rosetree(α)) -> rosetree(alpha) 
ramaMasAlta(r, e • s) ≡ 
	if vacia?(e • s) then
		rosetree(r, <>)
	else
		if altura(e) > altura(ramaMasAlta(r, s))  then
			e
		else
			ramaMasAlta(r, s)
		fi
	fi

altura : rosetree(α) -> Nat 
altura(rose(a, b)) ≡ 
	if vacia?(b) then
		1
	else
		1 + ramaMasAlta(r, b)
	fi

// b  preguntar si esta bien (mi idea)
esHoja? : rosetree(α) -> bool
esHoja? (rose(r, b)) ≡ vacia?(b)

#CantHojas : rosetree(α) -> Nat 
#CantHojas (rose(a, b)) ≡ if vacia?(b) then 
													1 else 
															if esHoja(prim(b)) then 1 + #CantHojas(rose(a, fin(b))) else #CantHojas(rose(a, fin(b))) fi 
													fi
											
													
// c preguntar si esta ok
podar : rosetree(α) a-> rosetree(α)   {¬esHoja(a)}
podar (rose(a, b)) ≡ 
	if esHoja(prim(b)) then
		podar(rose(a, fin(b)))
	else
		rose(a, prim(b) • podar(fin(b)))
	fi
	

// d preguntar si esta ok
ramasMenorOIgual : α n × rosetree(α) -> secu(secu(α))  {n >= 1}
ramasMenorOIgual (n, rose(r, h)) ≡ 
	if n = 1 then
		<r>
	else
		if vacia?(h)) then
			<r>
		else
			insertarATodos(r, ramasMenorOIgual(n - 1, h))
		fi
	fi
	

insertarATodos : α × secu(secu(α)) -> secu(α)
insertarATodos (a, b) ≡ 
	if vacia?(b) then
		<>
	else
		(a • prim(b)) • insertarATodos(a, fin(b))
	fi
	
	
// e preguntar si esta ok
elementosDelNivel : α n × rosetree(α) -> secu(α) {n >= 1}
elementosDelNivel (n, rose(r, h)) ≡ nivelN(ramasMenorOIgual(n, rose(r, h)))

nivelN : α n × secu(secu(α)) -> secu(α)  {n >= 1}
nivelN (n, ramas) ≡ 
	if vacia?(ramas) then
		<>
	else
		if long(prim(ramas)) = n then
			ult(prim(ramas)) • nivelN(n, fin(ramas))
		else
			nivelN(n, fin(ramas))
		fi
	fi
	
// f preguntar si esta ok
ramasMasLargasConRepetidos : rosetree(α) -> conj(secu(α))
ramasMasLargasConRepetidos (r) ≡ conjRamasConRepetidos(ramasDeNivelN(ramasMenorOIgual(altura(r), r)))

ramasDeNivelN : α n × secu(secu(α)) -> secu(secu(α))  {n >= 1}
ramasDeNivelN (n, ramas) ≡ 
	if vacia?(ramas) then
		<>
	else
		if long(prim(ramas)) = n then
		 	prim(ramas) • ramasDeNivelN(n, fin(ramas))
		else
			ramasDeNivelN(n, fin(ramas))
		fi
	fi
	
conjRamasConRepetidos : secu(secu(α)) -> conj(secu(α))
conjRamasConRepetidos (ramas) ≡ 
	if vacia?(ramas) then
		Ø
	else
		if tieneRepetidos(prim(ramas)) then
			Ag(prim(ramas), conjRamasConRepetidos(fin(ramas)))
		else
			 conjRamasConRepetidos(fin(ramas))
		fi
	fi
	
tieneRepetidos : secu(α) -> Bool
tieneRepetidos (x) ≡ 
		if vacia?(x) then
			false
		else
			if CantidadApariciones(prim(x), fin(x)) > 0 then
				true
			else
				tieneRepetidos(fin(x))
			fi
		fi
		


// PARTE 2 
//7
TAD Polinomios
	Axiomas:
		Evaluar(Cte(const), n) ≡ const
		Evaluar(X, n) ≡ n
		Evaluar(a + b, n) ≡ Evaluar(a, n) + Evaluar(b, n)
		Evaluar(a . b, n) ≡ Evaluar(a, n) . Evaluar(b, n)

		esRaiz? : polinomio × nat -> Bool
		esRaiz(p, n) ≡ 0 = Evaluar(p, n)
Fin TAD

//8 
TAD ROBOT
	Axiomas:
	Trayectoria (Ubicar(c)) ≡ <c> 
	Trayectoria (Arriba(r)) ≡ Trayectoria(r) • < π1(PosiciónActual(r) + 1), π2(PosiciónActual(r)) >
	Trayectoria (Abajo(r)) ≡ Trayectoria(r) • < π1(PosiciónActual(r) - 1), π2(PosiciónActual(r)) >
	Trayectoria (Derecha(r)) ≡ Trayectoria(r) • < π1(PosiciónActual(r)), π2(PosiciónActual(r) + 1) >
	Trayectoria (Izquierda(r)) ≡ Trayectoria(r) • < π1(PosiciónActual(r)), π2(PosiciónActual(r) - 1) >

	PosiciónActual : robot -> coordenada
	PosiciónActual(r) ≡ ult(Trayectoria(r))

	CuantasVecesPasó : coordenada × robot -> nat 
	CuantasVecesPasó (c, r) ≡ CantidadApariciones(c, Trayectoria(r))

	MásALaDerecha : robot -> coordenada
	MásALaDerecha (r) ≡ 
		if long(Trayectoria(r)) = 1 then
			prim(Trayectoria(r))
		else
			if π2(prim(Trayectoria(r))) > π2(MásALaDerecha(fin(Trayectoria(r))))   then
				prim(Trayectoria(r))
			else
				MásALaDerecha(fin(Trayectoria(r)))
			fi
		fi
Fin TAD

//9
TAD ELECTROIMÁN
	Axiomas:
		Cinta(Arrancar(c)) ≡ c
		Cinta(Prender(e)) ≡ if  then SacarElem(Cinta(e)) else Cinta(e) fi
		Cinta(Apagar(e)) ≡ if imanCargado?(e) then PonerElem(Cinta(e)) else Cinta(e) fi 
		Cinta(<-(e)) ≡ <-(Cinta(e))
		Cinta(->(e)) ≡ ->(Cinta(e))
		
		ImánPrendido?(Arrancar(c)) ≡ true
		ImánPrendido?(Prender(e)) ≡ true
		ImánPrendido?(Apagar(e)) ≡ false
		ImánPrendido?(<-(e)) ≡ ImánPrendido(e)
		ImánPrendido?(->(e)) ≡ ImánPrendido(e)
		
		ImánCargado?(Arrancar(c)) ≡ false
		ImánCargado?(Prender(e)) ≡ CeldaActualOcupada?(e)
		ImánCargado?(Apagar(e)) ≡ false
		ImánCargado?(<-(e)) ≡ ImánCargado(e) ∨ CeldaActualOcupada(<-(e))
		ImánCargado?(->(e)) ≡ ImánCargado(e) ∨ CeldaActualOcupada(->(e))
		
		CeldaActualOcupada? (e) ≡ CeldaActualOcupada?(Cinta(e))
		
		#Giros<-(e) ≡ #Giros<-(Cinta(e))
		#Giros->(e) ≡ #Giros->(Cinta(e))
Fin TAD 

TAD Cinta
	Axiomas:
		#Celdas(Arrancar(n)) ≡ n 
		#Celdas(PonerElem(c)) ≡ #Celdas(c)
		#Celdas(SacarElem(c)) ≡ #Celdas(c)
		#Celdas(<-(c)) ≡ #Celdas(c)
		#Celdas(->(c)) ≡ #Celdas(c)
		
		CeldaOcupada?(n, Arrancar(n)) ≡ CeldaOcupada?(n, Arrancar(n))
		CeldaOcupada?(n, PonerElem(c)) ≡ CeldaActual = n ∨ CeldaOcupada(n, )
		CeldaOcupada?(n, PonerElem(c)) ≡ CeldaActual = n
Fin TAD


//10
TAD persona ES Nat

TAD Fila
	Igualdad Observacional:();
	Géneros: fila
	Exporta: AbrirVentanilla, Llegar, Atender, Esperando, Vacía, Posición, Longitud
	Usa: Bool, Nat, Cola, persona
	
	Observadores Básicos:
		cola: fila -> cola(persona)
		colados: fila -> cola(persona)
		retirados: fila -> cola(persona)
	Generadores:
		AbrirVentanilla:  -> fila
		Llegar: persona p × fila f -> fila     {¬Espeando(p,f)}
		Atender: fila f -> fila    {¬Vacía(f)}
		Retirarse: persona p × fila f -> fila   {Esperando(p,f)}}
		ColarseAdelanteDe: persona p × persona q × fila f -> fila       {¬Esperando(p,f) ∧ Esperando(q,f)}
	Otras Operaciones:
		Esperando:	persona × fila -> Bool
		Vacía: fila -> Bool
		estáEnLaCola?: persona × cola -> Bool
		Posición: persona p × fila f -> nat     {Esperando(p,f)}
		buscarPosición: persona × cola × nat -> nat
		Longitud: fila -> nat
		seColó?: persona p × fila f -> Bool    {Esperando(p,f)} 
		regenerarColaRetirado: persona × cola × cola -> cola
		regenerarColaColado: persona × persona × cola × cola -> cola
	Axiomas:
		cola(AbrirVentanilla())	≡ vacía()
		cola(Llegar(persona, f)) ≡ encolar(persona, cola(f))
		cola(Atender(f)) ≡ desencolar(cola(f))
		cola(Retirarse(p, f)) ≡ regenerarColaRetirado(p, cola(f), vacía())
		cola(ColarseAdelanteDe(p, q, f)) ≡ regenerarColaColado(p, q, cola(f), vacía())

		colados(AbrirVentanilla())	≡ vacía()
		colados(Llegar(persona, f)) ≡ colados(f)
		colados(Atender(f)) ≡ colados(f)
		colados(Retirarse(p, f)) ≡ colados(f)
		colados(ColarseAdelanteDe(p, q, f)) ≡ encolar(p, colados(f))
		
		retirados(AbrirVentanilla())	≡ vacía()
		retirados(Llegar(persona, f)) ≡ retirados(f)
		retirados(Atender(f)) ≡ retirados(f)
		retirados(Retirarse(p, f)) ≡ encolar(p, retirados(f)) 
		retirados(ColarseAdelanteDe(p, q, f)) ≡ retirados(f)

		regenerarColaRetirado(p, cola, colaRegenerada) ≡
				if vacía?(cola) then
					colaRegenerada
				else
					if proximo(cola) = p then
						regenerarColaRetirado(p, desencolar(cola), colaRegenerada)
					else
						regenerarColaRetirado(p, desencolar(cola), encolar(desencolar(cola), colaRegenerada))
					fi
				fi
		
		regenerarColaColado(p, q, cola, colaRegenerada) ≡
				if vacía?(cola) then
					colaRegenerada
				else
					if proximo(cola) = q then
						regenerarColaRetirado(p, desencolar(cola), encolar(q, encolar(p, colaRegenerada)))
					else
						regenerarColaRetirado(p, desencolar(cola), encolar(desencolar(cola), colaRegenerada))						
					fi
				fi
			
		Esperando(p, f) ≡ estaEnLaCola(p, cola(f))
			
		estáEnLaCola?(p, cola) ≡ 
			if vacía?(cola) then
				false
			else
				if próximo(cola) = p then
					true
				else
					esperandoAux(p, desencolar(cola))
				fi
			fi
			
			Vacía(f) ≡ vacía?(cola(f))
			
			Longitud(f) ≡ tamaño(cola(f))
			
			Posición(p, f) ≡ buscarPosición(p, cola(f), 1)
			
			buscarPosición(p, cola, posicionFila) ≡
				if próximo(cola) = p then
					posicionFila
				else
					buscarPosición(p, desencolar(cola), posicionFila + 1)
				fi
				
			seColó?(p, f) ≡ estaEnLaCola?(p, colados(f))
Fin TAD

//17
TAD Auto ES String
TAD Tarifa ES Nat
TAD Cabina ES Nat

TAD PDZ
	Igualdad Observacional:();
	Géneros: peaje
	Exporta: observadores básicos, Generadores, facturado, cabinasPorLasQuePasaronMasDeUnTipo
	Usa: Bool, Nat, Dicc, Conj, Secu
	
	Observadores Básicos:
	 	cabinas: peaje -> conj(Cabina)
		listadoTarifas: peaje -> dicc(auto, tarifa)
		limiteVehiculosEnFila: peaje -> Nat 
		filaCabina: peaje p × Cabina c-> secu(auto)    {c ∈ cabinas(p)}
		pagaron: peaje × Cabina c -> secu(auto)  {c ∈ cabinas(p)}
		pasaronSinPagar: peaje × Cabina c -> secu(auto)    {c ∈ cabinas(p)}
	Generadores:
		CrearPeaje:	conj(Cabina) cabinas × dicc(auto, tarifa) × nat -> peaje   {#cabinas > 0}
		LlegaAuto: peaje p × auto × Cabina c -> peaje    {c ∈ cabinas(p), auto ∈ claves(listadoTarifas(p))}
		Pagar: peaje p × Cabina c -> peaje    {c ∈ cabinas(p) ∧ ¬vacía?(filaCabina(peaje, c))}
	Otras Operaciones:
		facturado:	peaje p × cabina c -> Nat  {c ∈ cabinas(p)}
		cabinasPorLasQuePasaronMasDeUnTipo: peaje × auto -> conj(cabina)
		cabinasPorLasQuePasaronMasDeUnTipoAux: peaje × conj(cabina) × auto × conj(cabina)            (peaje, cabinas, tipo, resultante) ≡ 
		calcularFacturadoAux: peaje × secu(auto) × conj(auto) -> Nat
		cantidadDeUnTipo: secu(auto) × auto -> Nat
		primeraMitad: secu(α) -> secu(α)
		segundaMitad: secu(α) -> secu(α)
	Axiomas:
		cabinas(CrearPeaje(cabinas, listadoTarifas, limiteAutosEnFila))	≡ cabinas
		cabinas(LlegaAuto(peaje, auto, cabina))	≡ cabinas(peaje)
		cabinas(Pagar(peaje, cabina))	≡ cabinas(peaje)
		
		listadoTarifas(CrearPeaje(cabinas, listadoTarifas, limiteAutosEnFila))	≡ listadoTarifas
		listadoTarifas(LlegaAuto(peaje, auto, cabina))	≡ listadoTarifas(peaje)
		listadoTarifas(Pagar(peaje, cabina))	≡ listadoTarifas(peaje)
		
		limiteVehiculosEnFila(CrearPeaje(cabinas, listadoTarifas, limiteAutosEnFila))	≡ limiteVehiculosEnFila
		limiteVehiculosEnFila(LlegaAuto(peaje, auto, cabina))	≡ limiteVehiculosEnFila(peaje)
		limiteVehiculosEnFila(Pagar(peaje, cabina))	≡ limiteVehiculosEnFila(peaje)
		
		filaCabina(CrearPeaje(cabinas, listadoTarifas, limiteAutosEnFila), c)	≡ <>
		filaCabina(LlegaAuto(peaje, auto, cabina1), cabina2)	≡ 
			if cabina1 = cabina2 then
				if filaCabina(peaje, cabina1) < (limiteAutosEnFila - 1) then
					filaCabina(cabina2) ◦ auto
				else
					segundaMitad(filaCabina(cabina2) ◦ auto)
				fi
			else
				if filaCabina(peaje, cabina1) < (limiteAutosEnFila - 1) then
				 	filaCabina(cabina2) 
				else
					segundaMitad(filaCabina(cabina2))
				fi
			fi
		filaCabina(Pagar(peaje, cabina1), cabina2)	≡ 
			if cabina1 = cabina2 ∧ ¬vacía?(filaCabina(cabina2)) then
				fin(filaCabina(cabina1))
			else
				filaCabina(cabina2)
			fi
			
		pagaron(CrearPeaje(cabinas, listadoTarifas, limiteAutosEnFila), cabina2)	≡ <>
		pagaron(LlegaAuto(peaje, auto, cabina1), cabina2)	≡ pagaron(peaje, cabina2)
		pagaron(Pagar(peaje, cabina1), cabina2)	≡ 
			if cabina1 = cabina2 then
				pagaron(peaje, cabina2) ◦ prim(filaCabina(peaje, cabina2))
			else
				pagaron(peaje, cabina2)
			fi
			
		pasaronSinPagar(CrearPeaje(cabinas, listadoTarifas, limiteAutosEnFila), cabina2)	≡ <>
		pasaronSinPagar(LlegaAuto(peaje, auto, cabina1), cabina2)	≡
			if filaCabina(peaje, cabina1) < (limiteAutosEnFila - 1) then
				pasaronSinPagar(cabina2)
			else
				pasaronSinPagar(cabina2) && primeraMitad(filaCabina(peaje, cabina2))
			fi
		pasaronSinPagar(Pagar(peaje, cabina1), cabina2)	≡ pasaronSinPagar(peaje, cabina2)

		segundaMitad(secuencia) ≡ //funcion que da la ultima mitad de una secuencia
		primeraMitad(secuencia) ≡ //funcion que da la primera mitad de una secuencia
		
		facturado(peaje, cabina) ≡ calcularFacturadoAux(peaje, pagaron(peaje, cabina), claves(listadoTarifas(peajes)))
			
		calcularFacturadoAux(peaje, pagaron, tipos) ≡
			if Ø?(tipos) then
				0
			else
				(obtener(dameUno(tipos), listadoTarifas(peaje)) * cantidadDeUnTipo(pagaron, dameUno(tipos))) + calcularFacturadoAux(peaje, pagaron, sinUno(tipos))
			fi
				
		cantidadDeUnTipo(secuenciaAutos, auto) ≡
			if vacía?(secuenciaAutos) then
				0
			else
				if prim(secuenciaAutos) = auto then
					1 + cantidadDeUnTipo(fin(secuenciaAutos, auto))
				else
					cantidadDeUnTipo(fin(secuenciaAutos, auto))
				fi
			fi.
			
		cabinasPorLasQuePasaronMasDeUnTipo(peaje, tipo) ≡ cabinasPorLasQuePasaronMasDeUnTipoAux(peaje, sinUno((cabinas(peaje)), tipo, Ag(dameUno(cabinas), Ø))
		
		cabinasPorLasQuePasaronMasDeUnTipoAux(peaje, cabinas, tipo, resultante) ≡ 
			if Ø?(cabinas) then
				resultante
			else
				if cantidadDeUnTipo(pagaron(peaje, dameUno(cabinas)) && pasaronSinPagar(peaje, dameUno(cabinas)), tipo) = cantidadDeUnTipo(pagaron(peaje, prim(resultante)) && pasaronSinPagar(peaje, prim(resultante)), tipo)  then
					cabinasPorLasQuePasaronMasDeUnTipoAux(peaje, sinUno(cabinas), tipo, Ag(dameUno(cabinas), resultante))
				else
					if cantidadDeUnTipo(pagaron(peaje, dameUno(cabinas)) && pasaronSinPagar(peaje, dameUno(cabinas)), tipo) > cantidadDeUnTipo(pagaron(peaje, prim(resultante)) && pasaronSinPagar(peaje, prim(resultante)), tipo) then
						cabinasPorLasQuePasaronMasDeUnTipoAux(peaje, sinUno(cabinas), tipo, Ag(dameUno(cabinas), Ø))
					else
						cabinasPorLasQuePasaronMasDeUnTipoAux(peaje, sinUno(cabinas), tipo, resultante)
					fi
				fi
			fi
Fin TAD

//18
TAD Participante ES Nat

TAD RedAntisocial
	Igualdad Observacional:();
	Géneros: red
	Exporta: nombreTad, observadores, generadores, 
	Usa: Bool, Nat, Conj
	
	Observadores Básicos:
		participantes: red -> Conj(participante)	    // estos son los participantes activos
		seguidores: red r × participante p -> Conj(participante)    {p ∈ participantes(r)}
		expulsados: red × Conj(participante)
	Generadores:
		CrearRed:	participante	-> red 
		AgregarParticipante: red r × participante convocante × participante convocado -> red   
		             {estaEnLaRed?(r, convocante) ∧ ¬estaEnLaRed?(r, convocado) ∧ ¬(convocado ∈ expulsados(red))}
		EnjuiciarParticipante: red r × participante p -> red      {(#participantes(r) > 3) ∧ (p ∈ participantes(r))}
		AbsolverEnjuiciado: red r × participante p -> red    {p ∈ expulsados(r)}
	Otras Operaciones:
		estaEnLaRed?:	red × participante	-> bool 
		#seguidoresDeParticipante: red r × participante p -> Nat   {p ∈ seguidores(r, p)} 
		generarUnTribunal: conj(participante) -> conj(participante)  // devuelve 3 miembros 
		todosLosDescendientes: red × conj(participante) -> conj(participante)  // devuelve todos los descendientes de todos los participantes
		descendientes: red r × participante p -> conj(participante) {p ∈ participantes(r)}// devuelve todos los descendientes de p
		eliminarRepetidos: conj(participante) × conj(participante) -> conj(participante)   // elimina del conjA los que estan en el conjB
		desciende: red r × participante p1 × participante p2 -> Bool   {p1 ∈ participantes(r) ∧ p2 ∈ participantes(r)} 		// se fija si p1 desciende de p2 
		debenExpulsarAlParticipante: red r × participante p -> Bool {p ∈ participantes(r)}
		eliminarItem: secu(α) × α -> secu(α)
	Axiomas:
		participantes(CrearRed(lider)) ≡ Ag(lider, Ø)
		participantes(AgregarParticipante(red, convocante, convocado)) ≡ Ag(convocado, participantes(red))
		participantes(EnjuiciarParticipante(red, participante)) ≡ 
			// verifico si mas de la mitad del tribunal desciende del participante enjuiciado
			if !debenExpulsarAlParticipante(red, participante)
			then
				participantes(red)
			else
				eliminarRepetidos(participantes(red), descendientes(red, participante))
			fi
		participantes(AbsolverEnjuiciado(red, participante)) ≡ participantes(red)

		seguidores(CrearRed(lider), p1) ≡ <>  // asumo que p1 es igual a lider porque solo hay un participante al crear la RedAntisocial
		seguidores(AgregarParticipante(red, convocante, convocado), p2) ≡
			if convocante = p1 then
				seguidores(p2) ◦ convocado
			else
				seguidores(p2)
			fi
		seguidores(EnjuiciarParticipante(red, participante), p2) ≡ seguidores(p2)   // QUE HACER ACA? PORQUE ESTE PARTICIPANTE SE VA A BORRAR EN CASO DE SER EXPULSADO
		seguidores(AbsolverEnjuiciado(red, participante), p2) ≡ seguidores(p2) 
		
		expulsados(CrearRed(lider)) ≡ <>
		expulsados(AgregarParticipante(red, convocante, convocado)) ≡ expulsados(red)
		expulsados(EnjuiciarParticipante(red, participante)) ≡ 
			// verifico si mas de la mitad del tribunal desciende del participante enjuiciado
			if !debenExpulsarAlParticipante(red, participante)
			then
				expulsados(red)
			else
				expulsados(red) ◦ participante
			fi
		expulsados(AbsolverEnjuiciado(red, participante)) ≡ eliminarItem(expulsados(red), participante, <>)
		
		eliminarItem(secuencia, item, resultado) ≡
			if vacía?(secuencia) then
				resultado
			else
				if prim(secuencia) = item then
					eliminarItem(fin(secuencia), item, resultado)
				else
					prim(secuencia) • eliminarItem(fin(secuencia), item, resultado)
				fi
			fi
		
		generarUnTribunal(posibilidades) ≡ {Ag(dameUno(posibilidades - dameUno(posibilidades) - dameUno(posibilidades - dameUno(posibilidades))) , 
																				 Ag(dameUno(posibilidades - dameUno(posibilidades))
			                                  , Ag(dameUno(posibilidades), Ø)))
																			  }
		
		debenExpulsarAlParticipante(red, participante) ≡
		!(desciende?(red, dameUno(generarUnTribunal(participantes(red) - participante)), participante)
			∧ desciende?(red, dameUno((generarUnTribunal(participantes(red) - participante) - sinUno(generarUnTribunal(participantes(red) - participante)))), participante))
		
		todosLosDescendientes(red, participantes) ≡
			if Ø(participantes) then
				Ø
			else
				Ag(descendientes(red, dameUno(participantes)), todosLosDescendientes(red, sinUno(participantes)))
			fi
			
		descendientes(red, participante) ≡ 
			if Ø?(seguidores(red, participante)) then
				{participante}
			else
				Ag(participante, todosLosDescendientes(red, seguidores(red, participante)))
			fi
		
		eliminarRepetidos(conjA, conjB) ≡
			if Ø?(conjA) then
				Ø
			else
				if dameUno(conjA) ∈ conjB then
					eliminarRepetidos(sinUno(conjA), conjB)
				else
					eliminarRepetidos(conjA, conjB)
				fi
			fi
			
		desciende?(red, p1, p2) ≡ 
			if Ø?(seguidores(red, p2)) then
				false
			else
				if p1 ∈ seguidores(red, p2) then
					true
				else
					p1 ∈ seguidores(red, dameUno(red, seguidores(p2))) ∨ desciende(red, p1, sinUno(seguidores(red, p2)))
				fi
			fi
Fin TAD

//20
// empresa tiene tecnicos
// pedidosPendientes
// tecnicosPorDireccion  
// tecnicosDisponibles
// solicitar un tecnico   (generador)
// resolver un problema, lo hace un tecnico (generador). Comportamiento automatico de que si hay algun pedido pedido pendiente, se fija el mas cercano al domicilio y automaticamente se lo asigna
// si tecnico esta en la empresa lo envia al domicilio 
// el pedido tiene que tener una direccion 

TAD Tecnico ES Nat
TAD Pedido es Direccion

TAD TaD
	Igualdad Observacional:();
	Géneros: tad
	Exporta: observadores Básicos, generadores, generos, tecnicosQueLaVisitaronMasVeces
	Usa: Bool, Nat, Direccion, Conj, Dicc
	
	Observadores Básicos:
		tecnicos: tad -> conj(tecnico)
		pedidosPendientes: tad -> conj(pedido)   // pedidos pendientes de asignacion
		historialPedidos: tad -> dicc(tecnico, secu(pedido))  // cada vez que un tecnico tiene asignado un pedido se guarda aca
		tecnicosDisponibles:  tad -> conj(tecnico)   
	Generadores:
		crearTaD:	conj(tecnico) tecnicos -> tad   {#tecnicos >= 1}
		hacerUnPedido: tad t × pedido p -> tad   {¬(p ∈ pedidosPendientes(t))}
		resolverUnPedido: tad t × pedido p × tecnico t -> tad  {ult(obtener(t, historialPedidos(t))) = p}
	Otras Operaciones:
		generarHistorialPedidosDefault: conj(tecnico) × dicc(tecnico, secu(pedido)) -> dicc(tecnico, secu(pedido))
		tecnicosQueLaVisitaronMasVeces: tad × pedido -> conj(tecnico)
		tecnicosQueLaVisitaronMasVecesAux: tad × pedido × conj(tecnico) × conj(tecnico) -> conj(tecnico)
	Axiomas:
		tecnicos(crearTaD(tecnicos)) ≡ tecnicos
		tecnicos(hacerUnPedido(tad, pedido)) ≡ tecnicos(tad)
		tecnicos(resolverUnPedido(tad, pedido, tecnico)) ≡ tecnicos(tad)
		
		pedidosPendientes(crearTaD(tecnicos)) ≡ Ø
		pedidosPendientes(hacerUnPedido(tad, pedido)) ≡ 
			if Ø?(tecnicosDisponibles(tad)) then
				Ag(pedido, pedidosPendientes(tad))
			else
				pedidosPendientes(tad)
			fi
		pedidosPendientes(resolverUnPedido(tad, pedido, tecnico)) ≡ 
			if Ø?pedidosPendientes(tad) then
				pedidosPendientes(tad)
			else
				pedidosPendientes(tad) - pedidoMasCercanoDelTecnico(tad, tecnico)
			fi
		
		historialPedidos(crearTaD(tecnicos)) ≡ generarHistorialPedidosDefault(tecnicos, vacio())
		historialPedidos(hacerUnPedido(tad, pedido)) ≡ 
			if Ø?(tecnicosDisponibles(tad)) then
				historialPedidos(tad)
			else
				definir(dameUno(tecnicosDisponibles(tad)), obtener(dameUno(tecnicosDisponibles(tad)), historialPedidos(tad)) ◦ pedido,  historialPedidos(tad))
			fi
		historialPedidos(resolverUnPedido(tad, pedido, tecnico)) ≡
			if Ø?pedidosPendientes(tad) then
				historialPedidos(tad)
			else
				definir(tecnico, obtener(tecnico, historialPedidos(tad)) ◦ pedidoMasCercanoDelTecnico(tad, tecnico),  historialPedidos(tad))
			fi
		
		tecnicosDisponibles(crearTaD(tecnicos)) ≡ tecnicos
		tecnicosDisponibles(hacerUnPedido(tad, pedido)) ≡ 
			if Ø?tecnicosDisponibles(tad) then
				tecnicosDisponibles(tad)
			else
				tecnicosDisponibles(tad) - dameUno(tecnicosDisponibles(tad))
			fi
		tecnicosDisponibles(resolverUnPedido(tad, pedido, tecnico)) ≡ 
			if Ø?pedidosPendientes(tad) then
				Ag(tecnicosDisponibles(tad), tecnico)
			else
				tecnicosDisponibles(tad)
			fi
			
		generarHistorialPedidosDefault(tecnicos, diccionario) ≡
			if Ø?(tecnicos) then
				diccionario
			else
				generarHistorialPedidosDefault(sinUno(tecnicos), definir(dameUno(tecnico), <>, diccionario))
			fi
		
		
		pedidoMasCercanoDelTecnico(tad, tecnico) ≡
			buscarMasCercanoAux(tad, sinUno(pedidosPendientes(tad)), dameUno(pedidosPendientes(tad)), tecnico)
			
		buscarMasCercanoAux(tad, pedidosPendientes, masCercano, tecnico) ≡
				if Ø?(pedidosPendientes) then
					masCercano
				else
					if 	dist(masCercano, ult(obtener(tecnico, historialPedidos(tad)))) > dist(dameUno(pendientes), ult(obtener(tecnico, historialPedidos(tad)))) then
						buscarMasCercanoAux(tad, sinUno(pendientes), dameUno(pendientes), tecnico)
					else
						buscarMasCercanoAux(tad, sinUno(pendientes), masCercano, tecnico)
					fi
				fi
		
		tecnicosQueLaVisitaronMasVeces(tad, direccion) ≡
			tecnicosQueLaVisitaronMasVecesAux(tad, direccion, sinUno(tecnicos), {dameUno(tecnicos)} )
	
		tecnicosQueLaVisitaronMasVecesAux(tad, direccion, tecnicos, resultado) ≡
			if Ø?(tecnicos) then
				resultado
			else
				if CantidadApariciones(direccion, obtener(dameUno(tecnicos), historialPedidos(tad))) > 
					 CantidadApariciones(direccion, obtener(dameUno(resultado), historialPedidos(tad)))
				 then
					Ag(dameUno(tecnicos), Ø)
				else
					if CantidadApariciones(direccion, obtener(dameUno(tecnicos), historialPedidos(tad))) =
						 CantidadApariciones(direccion, obtener(dameUno(resultado), historialPedidos(tad))) then
							Ag(dameUno(tecnicos), resultado)	
					else
						resultado
					fi
				fi
			fi
Fin TAD	







// centrosDeVacunacion -> tad ->    dicc()
// vacunados
// pendientesPorVacunarse
// #vacunasDisponibles
// inscribirse solo se pueden inscribir en una sola ciudad, en una planilla de a una o varias personas 
// abrirFrascoDeVacunas, solo se puede abrir si hay 5 personas disponibles, comportamiento automatico
// LleganVacunaAlCentro, centro × cantidad
// se quiere saber que provincia vacuno mas y cual tiene mas vacunas disponibles

AZZOLLINI MAURO EZEQUIEL  LU: 774/19
TAD centroDeVacunacion ES String      // el centro de vacunacion va a ser una ciudad
TAD persona es Nat

TAD Sistema de Vacunación
	Igualdad Observacional: (
		(∀sv1, sv2: sv ) (sv1 =obs sv2  <-> centrosDeVacunacion(sv1) =obs centroDeVacunacion(sv2) ∧ 
			(∀ centro: centroDeVacunacion, centro ∈ claves(centrosDeVacunacion(sv1)) ∧ centro ∈ claves(centrosDeVacunacion(sv2)))(
				#vacunasDisponibles(sv1, centro) =obs #vacunasDisponibles(sv2, centro) ∧
				vacunados(sv1, centro) =obs vacunados(sv2, centro) ∧
				pendientesPorVacunarse(sv1, centro) =obs pendientesPorVacunarse(sv2, centro)
				)
		)
		
		);
	Géneros: sv
	Exporta: generos, observadores basicos, generadores, ciudadQueMasVacuno, ciudadConMasVacunasDisponibles
	Usa: Nat, Dicc, Conj, centroDeVacunacion, persona
	
	Observadores Básicos:
		centrosDeVacunacion: sv -> dicc(centroDeVacunacion, conj(persona))
		#vacunasDisponibles: sv × centrosDeVacunacion -> Nat
		vacunados: sv × centroDeVacunacion -> conj(personas)
		pendientesPorVacunarse: sv × centroDeVacunacion -> conj(persona)
	Generadores:
		crearSV:	dicc(centroDeVacunacion, conj(persona)) centros -> sv       {¬(Ø?claves(centros))} // un diccionario que tenga asignado a cada centro los habitantes de la ciudad
		LleganVacunas: sv t × centroDeVacunacion c × nat cant-> sv     {c ∈ claves(centrosDeVacunacion(t)) ∧ cant % 5 = 0}
		LleganInscripciones: sv t × centroDeVacunacion c × conj(persona) habitantes -> sv      {c ∈ claves(centrosDeVacunacion(t)) ∧ habitantes ⊆ obtener(c, centroDeVacunacion(t))}
	Otras Operaciones:
		ciudadQueMasVacuno:	sv -> centroDeVacunacion
		ciudadConMasVacunasDisponibles: sv -> centroDeVacunacion
		ciudadesQueMasVacunaronAux: sv × conj(centroDeVacunacion) × conj(centroDeVacunacion) -> conj(centroDeVacunacion)
		ciudadesConMasVacunasDisponibles: sv × conj(centroDeVacunacion) × conj(centroDeVacunacion) -> conj(centroDeVacunacion)
		dameN: Nat × conj(persona) -> conj(persona)
		sinN: Nat × conj(persona) -> conj(persona)
		damePendientesDeVacunarseValidos: sv t × centroDeVacunacion c × conj(persona) -> conj(persona)    {c ∈ claves(centrosDeVacunacion(t))} 
		generarNuevosVacunados: sv × centroDeVacunacion × Nat × conj(persona) × conj(persona) -> conj(persona) 
	Axiomas:
		centrosDeVacunacion(crearSV(centrosDeVacunacion)) ≡ centrosDeVacunacion
		centrosDeVacunacion(LleganVacunas(sv, centro, cantidad)) ≡ centrosDeVacunacion(sv)
		centroDeVacunacion(LleganInscripciones(sv, centro, inscripciones)) ≡ centrosDeVacunacion(sv)
		
		#vacunasDisponibles(crearSV(centrosDeVacunacion), c) ≡ 0
		#vacunasDisponibles(LleganVacunas(sv, cA, cantidad), cB) ≡ 
			if cA=cB then
				if Ø?(pendientesPorVacunarse(sv, cB)) then
					#vacunasDisponibles(sv, cB) + cantidad
				else
					#vacunasDisponibles(sv, cB) + cantidad - #generarNuevosVacunados(sv, cB, #vacunasDisponibles(sv, cB) + cantidad, pendientesPorVacunarse(sv, cB), Ø)
				fi
			else
				#vacunasDisponibles(sv, cB)
			fi
		#vacunasDisponibles(LleganInscripciones(sv, cA, inscripciones), cB) ≡ 
			#vacunasDisponibles(sv, cB) - #generarNuevosVacunados(sv, cB, #vacunasDisponibles(sv, cB), pendientesPorVacunarse(sv, cB), Ø)
		
		
		vacunados(crearSV(centrosDeVacunacion), c) ≡ Ø
		vacunados(LleganVacunas(sv, cA, cantidad), cB) ≡ 
			if cB=cA then
				vacunados(cB) ∪ generarNuevosVacunados(sv, cB, #vacunasDisponibles(sv, cB), pendientesDeVacunarse(sv, cB), Ø)
			else
				vacunados(sv, cB)
			fi
		vacunados(LleganInscripciones(sv, cA, inscripciones), cB) ≡ 
			if cB=cA then
				vacunados(cB) ∪ generarNuevosVacunados(sv, cB, #vacunasDisponibles(sv, cB), pendientesDeVacunarse(sv, cB), Ø)
			else
				vacunados(sv, cB)
			fi
			
		pendientesPorVacunarse(crearSV(centrosDeVacunacion), c)	≡ Ø
		pendientesPorVacunarse(LleganVacunas(sv, cA, cantidad), cB) ≡ 
			if cA=cB then
				pendientesPorVacunarse(sv, cB) - generarNuevosVacunados(sv, cB, #vacunasDisponibles(sv, cB), pendientesPorVacunarse(sv, cB), Ø)
			else
				pendientesPorVacunarse(cB)
			fi
		pendientesPorVacunarse(LleganInscripciones(sv, cA, inscripciones), cB) ≡
				if cA=cB then
					(pendientesPorVacunarse(sv, cB) ∪ damePendientesDeVacunarseValidos(sv, cB, inscripciones)) - 
					generarNuevosVacunados(sv, cB, #vacunasDisponibles(sv, cB), pendientesPorVacunarse(sv, cB) ∪ damePendientesDeVacunarseValidos(sv, cB, inscripciones), Ø)
				else
					pendientesPorVacunarse(sv, cB)
				fi
		
		ciudadQueMasVacuno(sv) ≡ dameUno(ciudadesQueMasVacunaronAux(sv, sinUno(claves(centrosDeVacunacion(sv))), Ag(dameUno(claves(centrosDeVacunacion(sv))), Ø )))
		
		ciudadesQueMasVacunaronAux(sv, centrosDeVacunacion, resultado) ≡
		 	if Ø?(centrosDeVacunacion) then
		 		resultado
		 	else
		 		if #vacunados(sv, dameUno(centrosDeVacunacion)) > #vacunados(sv, dameUno(resultado))  then
		 			ciudadesQueMasVacunaronAux(sv, sinUno(centroDeVacunacion), Ag(dameUno(centrosDeVacunacion), Ø))    
		 		else
		 			if #vacunados(sv, dameUno(centrosDeVacunacion)) = #vacunados(sv, dameUno(resultado)) then
		 				ciudadesQueMasVacunaronAux(sv, sinUno(centroDeVacunacion), Ag(dameUno(centrosDeVacunacion), resultado))    
		 			else
		 				ciudadesQueMasVacunaronAux(sv, sinUno(centroDeVacunacion), resultado)
		 			fi
		 		fi
		 	fi
		
		ciudadConMasVacunasDisponibles(sv) ≡ dameUno(ciudadesConMasVacunasDisponibles(sv, sinUno(claves(centrosDeVacunacion(sv))), Ag(dameUno(claves(centrosDeVacunacion(sv))), Ø )))

		ciudadesConMasVacunasDisponibles(sv, centrosDeVacunacion, resultado) ≡
			if Ø?(centrosDeVacunacion) then
				resultado
			else
				if #vacunasDisponibles(sv, dameUno(centrosDeVacunacion)) > #vacunasDisponibles(sv, dameUno(resultado))  then
					ciudadesQueMasVacunaronAux(sv, sinUno(centroDeVacunacion), Ag(dameUno(centrosDeVacunacion), Ø))    
				else
					if #vacunasDisponibles(sv, dameUno(centrosDeVacunacion)) = #vacunasDisponibles(sv, dameUno(resultado)) then
						ciudadesQueMasVacunaronAux(sv, sinUno(centroDeVacunacion), Ag(dameUno(centrosDeVacunacion), resultado))    
					else
						ciudadesQueMasVacunaronAux(sv, sinUno(centroDeVacunacion), resultado)
					fi
				fi
			fi
		
		dameN(n, conjunto) ≡ if (Ø?(conjunto) ∨ n=0) then Ø else Ag(dameUno(conjunto), dameN(n-1, sinUno(conjunto))) fi
		sinN(n, conjunto) ≡ if (Ø?(conjunto) ∨ n=0) then Ø else sinN(n-1, sinUno(conjunto))) fi
		
		damePendientesDeVacunarseValidos(sv, centro, inscripciones) {         // se fija que las inscripciones nuevas no hayan sido vacunados
			if Ø?(pendientes) then
				Ø
			else
				if ¬(dameUno(pendientes) ∈ vacunados(sv, centro)) then
					Ag(dameUno(pendientes), damePendientesDeVacunarseValidos(sv, centro, sinUno(pendientes)))
				else
					damePendientesDeVacunarseValidos(sv, centro, sinUno(pendientes))
				fi
			fi
		}
		
		generarNuevosVacunados(sv, centro, cantidadVacunasDisponibles, pendientes, nuevosVacunados) ≡      		// genera conjunto de nuevos vacunados en el centro
			if cantidadVacunasDisponibles >= 5 ∨ pendientes >= 5 then
				generarNuevosVacunados(
					sv, centro, cantidadVacunasDisponibles - 5, sinN(5, pendientes) ,Ag(dameN(5, pendientes),  nuevosVacunados))
			else
				nuevosVacunados
			fi
Fin TAD




AZZOLLINI MAURO EZEQUIEL  LU: 774/19
// Ejercicio 1 
prim: secuComp(α) s  -> tupla(α, nat)   {¬vacía?(s)}
prim(e • s) ≡ e 

fin: secuComp(α) s  -> secuComp(α)   {¬vacía?(s)}
prim(e • s) ≡ s

// comprimir
comprimir: secu(α) -> secuComp(α)
comprimir(s) ≡ 
	if vacía?(s) then
		<>
	else
		<prim(s), cantidadInicialDeApariciones(prim(s), s)> • comprimir(eliminarPrimerosN(cantidadInicialDeApariciones(prim(s), s), s))
	fi

pertenece: α × secuComp(α) -> Bool
cantApar(e, s) ≡
	if vacía?(s) then
		false
	else
		e = π1(prim(s)) ∨ pertenece(e, fin(s))
	fi

cantidadInicialDeApariciones: α × secu(α) -> Nat
cantidadInicialDeApariciones(ele, s) ≡
 		if vacía?(s) then
 			0
 		else
 			if prim(s)=ele then
 				1 + cantidadInicialesDeApariciones(ele, fin(s))
 			else
 				0
 			fi
 		fi

eliminarPrimerosN: Nat n × secu(α) s-> secu(α)     {n <= long(s)}
eliminarPrimerosN(n, secu) ≡
	if n=0 then
		secu
	else
		eliminarPrimerosN(n-1, fin(s))
	fi




//2
maxApsContiguas: secu(α) s -> α    {¬vacía?(s)}
maxApsContiguas(s) ≡ buscarMaximo(comprimirSecuenciaComprimidaAlMaximo(s)))

cantidadInicialDeApariciones2: α × secuComp(α) -> Nat
cantidadInicialDeApariciones2(ele, s) ≡
 		if vacía?(s) then
 			0
 		else
 			if π1(prim(s))=ele then
 				1 + cantidadInicialesDeApariciones(ele, fin(s))
 			else
 				0
 			fi
 		fi

comprimir: secuComp(α) -> secuComp(α)
comprimirSecuenciaComprimidaAlMaximo(s) ≡ 
	if vacía?(s) then
		<>
	else
		<π1(prim(s)), cantidadInicialDeApariciones2(π1(prim(s)), s)> • comprimir(eliminarPrimerosN(cantidadInicialDeApariciones2(π1(prim(s)), s), s))
	fi

buscarMaximo: secuComp(α) × tupla(α, Nat) -> α    
buscarMaximo(s, maximo) ≡
	if vacía?(s) then
		π1(maximo)
	else
		if π2(maximo) < π2(prim(s)) then
			buscarMaximo(fin(s), prim(s))
		else
			buscarMaximo(fin(s), maximo)
		fi
	fi
	

//3 
longComprimida: secuComp(α) -> nat    {¬vacía?(s)}
longComprimida(s) ≡ longitud(comprimirSecuenciaComprimidaAlMaximo(s))	

longitud: secuComp(α) -> nat 
longitud(s) ≡
		if vacía?(s) then
			0
		else
			1 + longitud(fin(s))
		fi
