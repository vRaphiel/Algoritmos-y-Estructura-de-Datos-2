MODULO 1: Mapa

Representación:
	Mapa se representa con estr donde
		estr es tupla ⟨	tamaño:	tupla⟨nat, nat⟩,
										inicioLlegada: tupla⟨coordenada, coordenada⟩,
										paredes: conj(coordenada),
										fantasmas: conj(coordenada),
										chocolates: conj(coordenada)⟩

Invariante de representación:
	Para que las coordenadas de inicio y de llegada sean válidas, deben estar contenidas
	dentro de los límites de alto y ancho del mapa, es decir, cumplir que
		- π₁(π₁(e.inicioLlegada)) debe ser menor o igual que π₁(e.tamaño).
		- π₂(π₁(e.inicioLlegada)) debe ser menor o igual que π₂(e.tamaño).
		- π₁(π₂(e.inicioLlegada)) debe ser menor o igual que π₁(e.tamaño).
		- π₂(π₂(e.inicioLlegada)) debe ser menor o igual que π₂(e.tamaño).
	Lo mismo debe ocurrir con todo el conjunto de las coordenadas de paredes
		- π₁(e.paredes) debe ser menor o igual que π₁(e.tamaño).
		- π₂(e.paredes) debe ser menor o igual que π₂(e.tamaño).
	Ídem con los fantasmas
		- π₁(e.fantasmas) debe ser menor o igual que π₁(e.tamaño).
		- π₂(e.fantasmas) debe ser menor o igual que π₂(e.tamaño).
	Ídem con los chocolates
		- π₁(e.chocolates) debe ser menor o igual que π₁(e.tamaño).
		- π₂(e.chocolates) debe ser menor o igual que π₂(e.tamaño).

Función de abstracción:
	Abs:	estr	->	Mapa	{Rep(e)}
	(∀e: estr) Abs(e) =obs m: Mapa | (1)∧(2)∧(3)∧(4)∧(5)∧(6)∧(7)
		donde:
		(1)	≡	largo(m) = π₁(e.tamaño)
		(2)	≡	alto(m) = π₂(e.tamaño)
		(3)	≡	inicio(m) = π₁(e.inicioLlegada)
		(4)	≡	llegada(m) = π₂(e.inicioLlegada)
		(5)	≡	paredes(m) = e.paredes
		(6)	≡	fantasmas(m) = e.fantasmas
		(7)	≡	chocolates(m) = e.chocolates

---
Interfaz:
	Parámetros formales:
		Géneros:	α
		Función:		//
			Copiar(in a:α) -> res: α
			Pre ≡ {true}
			Post ≡ {res = a}
			Complejidad: Θ(copy(a))
			Descripción: Función copia de α's.
			---
	Se explica con:	Mapa
	Géneros: mapa

	// Modificar aliasing y complejidad:
	Operaciones básicas:   // coincidiría con Interfaz
		nuevoMapa(in largo: nat, in alto: nat, in inicio:coordenada, in llegada:coordenada, in paredes:conj(coordenada), in fantasmas:conj(coordenada), in chocolates:conj(coordenada))	-> res: Mapa
		Pre ≡ {inicio ≠ llegada ∧ todosEnRango(paredes ∪ fantasmas ∪ chocolates ∪ {inicio, llegada}, largo, alto)
					∧ {inicio, llegada} ∩ (fantasmas ∪ paredes) = Ø ∧ disjuntosDeAPares(paredes, fantasmas, chocolates)}
		Post ≡ {res =obs crearMapa(largo, alto, inicio, llegada, paredes, fantasmas, chocolates)}
		Complejidad: Θ(1) 		//Es la sumatoria de la copia de todos los parámetros.
		Descripción: Genera un nuevo mapa.
		Aliasing: Devuelve una referencia del nuevo mapa.
		---
		distancia(in pos₁: coordenada, in pos₂: coordenada)	-> res: nat
		Pre ≡ {true}
		Post ≡ {res =obs distancia(pos₁, pos₂)}
		Complejidad: Θ(1)
		Descripción: Indica la distancia entre pos₁ a pos₂, es decir, los movimientos necesarios para llegar de pos₁ a pos₂.
		Aliasing: No presenta aspectos de aliasing.
		---
		distConFantasmaMasCercano(in fantasmas: conj(coordenada), in pos: coordenada)	-> res: nat
		Pre ≡ {¬vacío(fantasmas)}
		Post ≡ {res =obs distConFantasmaMasCercano(fantasmas, pos)}
		Complejidad: Θ(F)
		Descripción: Indica la distancia entre la posición actual del jugador y el fantasma más cercano.
		Aliasing: No presenta aspectos de aliasing.
		---
		enRango(in pos: coordenada, in largo: nat, in alto: nat) -> res: bool
		Pre ≡ {true}
		Post ≡ {res = true <-> enRango(pos, largo, alto)}
		Complejidad: Θ(1)
		Descripción: Indica si una coordenada está en rango en función del alto y largo del mapa.
		Aliasing: No presenta aspectos de aliasing.
		---
		todasEnRango(in posiciones: conj(coordenada), in largo: nat, in alto: nat)	-> res: bool
		Pre ≡ {true}
		Post ≡ {res = true <-> todasEnRango(posiciones, largo, alto)}
		Complejidad: Θ(P)			// P = # posiciones.
		Descripción: Dadas ciertas coordenadas, devuelve true si todas están en rango.
		Aliasing: No presenta aspectos de aliasing.
		---
		disjuntosDeAPares(in r: conj(α), in s: conj(α), in t: conj(α))	-> res: bool
		Pre ≡ {true}
		Post ≡ {res = true <->  disjuntosDeAPares(r, s, t)}
		Complejidad: Θ(1)
		Descripción: Chequea que los conjuntos pasados por parámetro sean disjuntos de a pares.
		Aliasing: No presenta aspectos de aliasing.
		---

	Algoritmos del módulo:  //Implementacion
	Mapa se representa con estr_mapa, 
	 										donde estr_mapa es tupla ⟨	tamaño:	tupla⟨largo: nat, alto: nat⟩,
																										inicioLlegada: tupla⟨inicio: coordenada, llegada: coordenada⟩,
																										paredes: conj(coordenada),
																										fantasmas: conj(coordenada),
																										chocolates: conj(coordenada) ⟩

		iNuevoMapa(in largo: nat, in alto: nat, in inicio:coordenada, in llegada:coordenada, in paredes:conj(coordenada), in fantasmas:conj(coordenada), in chocolates:conj(coordenada)) -> res: mapa
			//res <- nuevoMapa(largo, alto, inicio, llegada, paredes, fantasmas, chocolates)
			estr_mapa.tamaño.largo <- largo
			estr_mapa.tamaño.alto <- alto
			estr_mapa.inicioLlegada.inicio <- inicio
			estr_mapa.inicioLlegada.llegada <- llegada
			estr_mapa.paredes <- paredes
			estr_mapa.fantasmas <- fantasmas
			estr_mapa.chocolates <- chocolates
			res <- estr_mapa
		---
		iDistancia(in pos₁: coordenada, in pos₂: coordenada)	-> res: nat
			res <- | π₁(pos₁) - π₁(pos₂) | + | π₂(pos₁) - π₂(pos₂) |
		---
		iDistConFantasmaMasCercano(in fantasmas: conj(coordenada), in pos: coordenada)	-> res: nat
			aux <- iDistancia(dameUno(fantasmas), pos)
			i <- 1
			fantasmas_aux <- fantasmas
			while (i < #fantasmas)
				if (iDistancia(dameUno(sinUno(fantasmas_aux)), pos) < aux)
					aux <- iDistancia(dameUno(sinUno(fantasmas_aux)), pos)
				endif
				i ++
				fantasmas_aux <- sinUno(fantasmas_aux)
			endwhile
			res <- aux
		---
		iEnRango(in pos: coordenada, in largo: nat, in alto: nat) -> res: bool
			res <- 0 < π₁(pos) ≤ largo ∧ 0 < π₂(pos) ≤ alto
		---
		iTodasEnRango(in posiciones: conj(coordenada), in largo: nat, in alto: nat)	-> res: bool
			res <- true
			i <- 0
			aux <- posiciones 																	//copia
			while (i < #posiciones)
				if (¬ iEnRango(dameUno(posiciones), largo, alto))
					res <- false
				endif
				i ++
				aux <- sinUno(aux)
			endwhile
		---
		iDisjuntosDeAPares(in r: conj(α), in s: conj(α), in t: conj(α))	-> res: bool
			res ← #r + #s + #t = #(r ∪ s ∪ t)
		---

MODULO 2: Partida

Representación:
	Partida se representa con estr_partida donde
		estr_partida es tupla ⟨	mapa:	mapa,
														posJugador: coordenada,
														posChocolates: conj(coordenada),
														movimientos: nat,
														movDeInmunidad: nat,
														ganó: bool,
														perdió: bool ⟩

Invariante de Representación:
	- e.posJugador debe ser una posición válida dentro del mapa, es decir, debe estar dentro de las coordenadas que delimita el mismo.
	- Si e.posJugador ∈ e.posChocolates entonces e.movDeInmunidad debe ser igual a 10.
	- El conjunto e.posChocolates debe coincidir con el conjunto mapa.chocolates.
	- e.posJugador no puede coincidir con la posicion mapa.paredes.
	- e.posJugador no puede coincidir con la posicion mapa.fantasmas.
	- Si mapa.iDistConFantasmaMasCercano(mapa.fantasmas, e.posJugador) <= 3, e.movDeInmunidad = 0 y e.posJugador ≠ mapa.llegada,
		entonces π₁(e.estado), la cual indica si el jugador perdió, debe ser true.
	- ...

---
Función de abstracción:
	Abs:	estr	->	partida	{Rep(e)}
	(∀e: estr) Abs(e) =obs p: partida | (1)∧(2)∧(3)∧(4)∧(5)
		donde:
		(1)	≡	mapa(p) = e.mapa
		(2)	≡	jugador(p) = e.posJugador
		(3)	≡	chocolates(p) = e.posChocolates
		(4)	≡	cantMov(p) = e.movimientos
		(5)	≡	inmunidad(p) = e.movDeInmunidad

---
Interfaz:
	Parámetros formales:
		Géneros:	α
		Función:
			Copiar(in a:α) -> res: α
			Pre ≡ {true}
			Post ≡ {res = a}
			Complejidad: Θ(copy(a))
			Descripción: Función copia de α's.
			---
	Se explica con:	Partida
	Géneros: mapa, partida

	Operaciones básicas:
		nuevaPartida(in m: mapa)	-> res: partida
		Pre ≡ {true}
		Post ≡ {res =obs nuevaPartida(m)}
		Complejidad: Θ()
		Descripción: Genera una nueva partida.
		Aliasing: No presenta aspectos de aliasing.
		---
		mover(in/out p: partida, in d: direccion)	-> res: bool
		Pre ≡ {¬ π₁(e.partida) ∧ ¬ π₂(e.partida)}
		Post ≡ {res = true <-> not=obs mover(p, d)}
		Complejidad: Θ(1)
		Descripción: Genera ...
		Aliasing: No presenta aspectos de aliasing.
		---
		ganó?(in p: partida)	-> res: bool
		Pre ≡ {true}
		Post ≡ {res =obs ...}
		Complejidad: Θ(1)
		Descripción:  Genera ...
		Aliasing: No presenta aspectos de aliasing.
		---
		perdió?(in p: partida)	-> res: bool
		Pre ≡ {true}
		Post ≡ {res =obs ...}
		Complejidad: Θ(1)
		Descripción: Genera ...
		Aliasing: No presenta aspectos de aliasing.
		---
		siguienteMovimiento(in p: partida, in d: direccion)	-> res: coordenada
		Pre ≡ {true}
		Post ≡ {res =obs ...}
		Complejidad: Θ(1)
		Descripción: Genera ...
		Aliasing: No presenta aspectos de aliasing.
		---
		posMovimiento(in c: coordenada, in d: direccion)	-> res: coordenada
		Pre ≡ {true}
		Post ≡ {res =obs ...}
		Complejidad: Θ(1)
		Descripción: Genera ...
		Aliasing: No presenta aspectos de aliasing.
		---
		restringirMovimiento(in p: partida, in c: coordenada)	-> res: coordenada
		Pre ≡ {true}
		Post ≡ {res =obs ...}
		Complejidad: Θ(1)
		Descripción: Genera ...
		Aliasing: No presenta aspectos de aliasing.
		---

	Algoritmos del módulo:
		iNuevaPartida(in n: nat) -> res: estr

		---
		iMover(in n: nat) -> res: estr

		---
		iGanó?(in n: nat) -> res: estr

		---
		iPerdió?(in n: nat) -> res: estr

		---
		iSiguienteMovimiento(in n: nat) -> res: estr

		---
		iPosMovimiento(in n: nat) -> res: estr

		---
		iRestringirMovimiento(in n: nat) -> res: estr

		---
MODULO 3: Fichín


Representación:
	tipoDato se representa con estr donde
		estr es tupla ⟨	arg₀:	nat,
						arg₁: 	puntero(nat)
						⟩

Solución Informal:
	- e.arg₀ + 1 debe ser ...
	- si e.arg₁ ...
---
Invariante de Representación:
	Rep:	estr	->	boolean
	(∀e: estr) Rep(e)	≡ true ⇐⇒ (1)∧(2)
		donde:
		(1)	≡	e.arg₀ > ...
		(2)	≡	(∀n: nat)(e.arg₁ < ...)
---
Función de abstracción:
	Abs:	estr	->	tipoDato	{Rep(e)}
	(∀e: estr) Abs(e) =obs td: tipoDato | (1)∧(2)
		donde:
		(1)	≡	obs₁(td) = ...
		(2)	≡	obs₂(td) = ...
---
Interfaz:
	Parámetros formales:
		Géneros:	α
		Función:
			Copiar(in a:α) -> res: α
			Pre ≡ {true}
			Post ≡ {res = a}
			Complejidad: Θ(copy(a))
			Descripción: Función copia de α's.
			---
	Se explica con:	TipoDato
	Géneros:		tipoDato

	Operaciones básicas:
		NuevaOp(in n: nat)	-> res: tipoDato
		Pre ≡ {true}
		Post ≡ {res =obs ...}
		Complejidad: Θ(1)
		Descripción: Genera ...
		Aliasing: No presenta aspectos de aliasing.
		---
	Algoritmos del módulo:
		iNuevaOp(in n: nat) -> res: estr
			res ← ⟨0, 9⟩	// Ejemplo
		---









		1. Iniciar una partida debe ser O(c + |J|).
		2. Realizar un movimiento que termina la partida (ya sea ganada o perdida), debe ser O(|J|).
		3. El resto de las acciones dentro de una partida (moverse, comer chocolates) deben ser O(1).
		
		
		
		Fichin:
			function nuevaPartida(inout fichin, in mapa)
				fichin.partida.iniciarPartida(mapa)
		
		
		Partida:
			iniciarPartida(mapa)
				
		
		
