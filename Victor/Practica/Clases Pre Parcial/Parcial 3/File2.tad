1 - Definicion del problema del diseño y repaso de estructuras vistas

problemaQueremos armar el registro Maestro de clientes

Asi, dado un numero de DNI de un cliente, queremos conocer la direccion del mail de persona dado su DNI (operacion obtenerMail(dni)). Tambien, nos interesa saber cuantos
clientes tenemos (cantClientes)

¿Quer estructura podriamos tener para lograr lo siguiente?
0) agregarClietne(dni, mail), borrarCliente(dni), modificarCliente(dni, mail) debe costar O(n)
1) obtenerMail(dni) debe costar O(log n)
2) cantClientes debe costar O(1)
3) ¿Como podriamos hacer para que obtenerMail cuesta O(1)?
$) Agregar una operacion clientes, que devuelva todos los DNIs de los clientes

con 'n' la cantidad de clientes

ESTRUCTURA

DNI se representa con nat
Mail se representa con string

MaestroClientes se representa con estr
donde estr es tupla (
		mailPorCliente: diccLog(dni, mail),
		cantClientes: nat
	
	)	
	con diccLog un diccionario que está implementado sobre AVL, y tiene casi misma interfaz de diccionario Lineal
	(nada mas que con el costo logatirmico en vez de lineal)
	
	Generos: maestroclientes

Primera version de la estructura (opciones):
* Conjunto Lineal(tupla(dni, mail)) : conjLineal(tupla(dni, mail))	|X|
		-> Agrega una cosa mas a validar en el invariante del modulo pues tengo que validar elementos repetidos / no repetidos
* Diccionario Lineal (dni, mail): diccLineal(dni, mail)

Segunda version de la estructura (opciones, para poder hacer obtenerMail en O(log n))
* Usar un diccionario logatirmico (e.g. AVL) en vez de lineal
* Hacer busqueda binaria (No se puede, porque tiene que estar ordenado, y es un problema Ω(n log n)). NO!
* Agregar otro diccionario con AVL -> diccLog(dni, mail) solo para el mail, esto tendria sentido si en el otro diccionario
	tengo mas datos, y solo necesito acceder en log n al mail
	
	

ALGORITMOS

	{pre: el cliente no está registrado, correo es una direccion valida de mail}
	// Me quedo con el iterador apuntando al elemento que acabo de agregar
	// Lo coloco el res : iterador por las dudas, ej: borrado en O(1)
	iAgregarCliente(in/out clis: maestrclientes, docu: dni, correo: mail) -> res: itDicc(dni, mail)
		res <- definir(clis.mailPorCliente, docu, correo)			
		clis.cantClientes <- clis.cantClientes + 1
		
			
		// Con dicc lineal
		// O(n + 1 + long(correo)) Pero yo no se nada de correo ~> O(n) porque los mails tienen
		// una longitud a nivel practica y a nivel estandar
		
		// Con dicc log
		// O(log n + 1 + long(correo)) Pero yo no se nada de correo ~> O(log n) porque los mails tienen
		// una longitud a nivel practica y a nivel estandar
		
		// Con eso cumplimos que res devuelve el iterador
	
{pre: el cliente con dni docu ya está en el maestro}
iBorrarCliente(in clis: maestroclientes, docu: dni) -> res :
	borrar(clis.mailPorCliente, docu) 
	clis.cantClientes <- clis.cantClientes - 1
	// Con dicc Lineal
	// O(n) 
	
	// Con dicc log
	// O(log n)

{pre: el cliente con dni docu ya esta en el maestro}
// Definir tiene implicito el recorrer el diccionario
iModificarCliente(in clis: maestroclientes, docu: dni, correo: mail) -> res: itDicc(dni, mail)
	res <- definir(clis.mailPorCliente, docu, correo) 
	// Con dicc lineal
	// O(n) + long(correo) = O(n)

	// Con dicc Log
	// O(log n)
	
// Si hay algo que no sabemos que pueda devolver mejor lo especificamos en la pre y listo, para estar seguro quue devolvemos
// Em este caso si no hay un significado devolvemos...null? no se, por eso la Pre
{pre: el cliente con dni docu ya está en el maestro}
iObtenerMail(in clis: maestroclientes, docu: dni) -> res: mail
	res <- significado(clis.mailPorCliente, docu)
	
iObtenerMail es O(log n)
	// Con dicc Log
	// O(log n)

iCantClientes(in clis: maestroclientes) -> res: nat
	res <- clis.cantClientes	

iCantClientes es O(1)

iEsCliente(in clis: maestroclientes, docu: dni) -> res: bool
	res <- definido?(clis.mailPorCliente, docu)			// O(n)

iEsCliente? es O(log n)

iClientes(in clis: maestroClientes) -> res: conjLineal(dni)
	res <- claves(clis.mailPorCliente)
	
Claves devuelve una referencia no modificable a las claves del diccionario

3) Si, suponiendo que los DNIs estan acotados en su longitud (en este caso, en 8 caracteres)
Para esto, podemos usar un diccionario digital (basado en Tries) donde 

// Ejercicios
Padron electoral
1 mesa puede registrar varias veces los datos del CPD para corregirr errores u omisiones
Si se registra los datos, la informacion que se envio anteriormente se descarga y se sobreescribe

Ok. yo se que tengo agrupaciones que se numeran desde 1 hasta G. Siendo G un tope, igualmente, esto no me dice que este acotado por un numero especifico. Asumo que no hay una cota
Tambien se que cada agrupacion tiene candidados en una lista
Los votantes se registran en las mesas por su DNI. Las mesas se identifican con un nombre (M)

Tengo que saber un par de cosas
M es al longitud de los nombres de las mesas
G es el numero de agrupaciones
K es la cantidad de cantidatos
V es la cantidad total de votantes del sistema
Va es la cantidad de votantes afectados

CPD se representa con estr donde estr es ⟨
	mesas: diccTrie(mesa, ⟨vot: conjLineal(DNI), votA: arreglo(nat)[g]>),
	agrupaciones: diccLog(candidato, conj(agrupacion)),
	votosxagrup: arreglo(nat)[G],
	votantesTot: diccLog(dni, ⟨#AP: nat, rep: itConjLineal⟩),
	repetidos: conjLineal(dni)
⟩	

Mesas es un diccTrie, porque se que una mesa es un string. Luego como M es la longitud del nombre, la busqueda en un diccTrie se basa en la longitud de las claves
Luego, la busqueda en un diccTrie es O(M). Inserccion y borrado lo mismo

Por otro lado, G es el numero de agrupaciones, entonces, yo tengo un diccLog para poder almacenar esto. En el peor de los casos, la busqueda es O()

Registrar( inout c: cpd, in m: mesa, in ds: conj(dni), in as: multiconj(agrupacion))
